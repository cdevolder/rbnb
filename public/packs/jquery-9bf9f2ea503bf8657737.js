/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/packs/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ({

/***/ 4:
/*!****************************************************!*\
  !*** ./app/javascript/packs/jquery.geocomplete.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * jQuery Geocoding and Places Autocomplete Plugin - V 1.7.0\n *\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2016\n * @author Ubilabs http://ubilabs.net, 2016\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\n// # $.geocomplete()\n// ## jQuery Geocoding and Places Autocomplete Plugin\n//\n// * https://github.com/ubilabs/geocomplete/\n// * by Martin Kleppe <kleppe@ubilabs.net>\n\n(function ($, window, document, undefined) {\n\n  // ## Options\n  // The default options for this plugin.\n  //\n  // * `map` - Might be a selector, an jQuery object or a DOM element. Default is `false` which shows no map.\n  // * `details` - The container that should be populated with data. Defaults to `false` which ignores the setting.\n  // * 'detailsScope' - Allows you to scope the 'details' container and have multiple geocomplete fields on one page. Must be a parent of the input. Default is 'null'\n  // * `location` - Location to initialize the map on. Might be an address `string` or an `array` with [latitude, longitude] or a `google.maps.LatLng`object. Default is `false` which shows a blank map.\n  // * `bounds` - Whether to snap geocode search to map bounds. Default: `true` if false search globally. Alternatively pass a custom `LatLngBounds object.\n  // * `autoselect` - Automatically selects the highlighted item or the first item from the suggestions list on Enter.\n  // * `detailsAttribute` - The attribute's name to use as an indicator. Default: `\"name\"`\n  // * `mapOptions` - Options to pass to the `google.maps.Map` constructor. See the full list [here](http://code.google.com/apis/maps/documentation/javascript/reference.html#MapOptions).\n  // * `mapOptions.zoom` - The inital zoom level. Default: `14`\n  // * `mapOptions.scrollwheel` - Whether to enable the scrollwheel to zoom the map. Default: `false`\n  // * `mapOptions.mapTypeId` - The map type. Default: `\"roadmap\"`\n  // * `markerOptions` - The options to pass to the `google.maps.Marker` constructor. See the full list [here](http://code.google.com/apis/maps/documentation/javascript/reference.html#MarkerOptions).\n  // * `markerOptions.draggable` - If the marker is draggable. Default: `false`. Set to true to enable dragging.\n  // * `markerOptions.disabled` - Do not show marker. Default: `false`. Set to true to disable marker.\n  // * `maxZoom` - The maximum zoom level too zoom in after a geocoding response. Default: `16`\n  // * `types` - An array containing one or more of the supported types for the places request. Default: `['geocode']` See the full list [here](http://code.google.com/apis/maps/documentation/javascript/places.html#place_search_requests).\n  // * `blur` - Trigger geocode when input loses focus.\n  // * `geocodeAfterResult` - If blur is set to true, choose whether to geocode if user has explicitly selected a result before blur.\n  // * `restoreValueAfterBlur` - Restores the input's value upon blurring. Default is `false` which ignores the setting.\n\n  var defaults = {\n    bounds: true,\n    strictBounds: false,\n    country: null,\n    map: false,\n    details: false,\n    detailsAttribute: \"name\",\n    detailsScope: null,\n    autoselect: true,\n    location: false,\n\n    mapOptions: {\n      zoom: 14,\n      scrollwheel: false,\n      mapTypeId: \"roadmap\"\n    },\n\n    markerOptions: {\n      draggable: false\n    },\n\n    maxZoom: 16,\n    types: ['geocode'],\n    blur: false,\n    geocodeAfterResult: false,\n    restoreValueAfterBlur: false\n  };\n\n  // See: [Geocoding Types](https://developers.google.com/maps/documentation/geocoding/#Types)\n  // on Google Developers.\n  var componentTypes = (\"street_address route intersection political \" + \"country administrative_area_level_1 administrative_area_level_2 \" + \"administrative_area_level_3 colloquial_area locality sublocality \" + \"neighborhood premise subpremise postal_code natural_feature airport \" + \"park point_of_interest post_box street_number floor room \" + \"lat lng viewport location \" + \"formatted_address location_type bounds\").split(\" \");\n\n  // See: [Places Details Responses](https://developers.google.com/maps/documentation/javascript/places#place_details_responses)\n  // on Google Developers.\n  var placesDetails = (\"id place_id url website vicinity reference name rating \" + \"international_phone_number icon formatted_phone_number\").split(\" \");\n\n  // The actual plugin constructor.\n  function GeoComplete(input, options) {\n\n    this.options = $.extend(true, {}, defaults, options);\n\n    // This is a fix to allow types:[] not to be overridden by defaults\n    // so search results includes everything\n    if (options && options.types) {\n      this.options.types = options.types;\n    }\n\n    this.input = input;\n    this.$input = $(input);\n\n    this._defaults = defaults;\n    this._name = 'geocomplete';\n\n    this.init();\n  }\n\n  // Initialize all parts of the plugin.\n  $.extend(GeoComplete.prototype, {\n    init: function init() {\n      this.initMap();\n      this.initMarker();\n      this.initGeocoder();\n      this.initDetails();\n      this.initLocation();\n    },\n\n    // Initialize the map but only if the option `map` was set.\n    // This will create a `map` within the given container\n    // using the provided `mapOptions` or link to the existing map instance.\n    initMap: function initMap() {\n      if (!this.options.map) {\n        return;\n      }\n\n      if (typeof this.options.map.setCenter == \"function\") {\n        this.map = this.options.map;\n        return;\n      }\n\n      this.map = new google.maps.Map($(this.options.map)[0], this.options.mapOptions);\n\n      // add click event listener on the map\n      google.maps.event.addListener(this.map, 'click', $.proxy(this.mapClicked, this));\n\n      // add dragend even listener on the map\n      google.maps.event.addListener(this.map, 'dragend', $.proxy(this.mapDragged, this));\n\n      // add idle even listener on the map\n      google.maps.event.addListener(this.map, 'idle', $.proxy(this.mapIdle, this));\n\n      google.maps.event.addListener(this.map, 'zoom_changed', $.proxy(this.mapZoomed, this));\n    },\n\n    // Add a marker with the provided `markerOptions` but only\n    // if the option was set. Additionally it listens for the `dragend` event\n    // to notify the plugin about changes.\n    initMarker: function initMarker() {\n      if (!this.map) {\n        return;\n      }\n      var options = $.extend(this.options.markerOptions, { map: this.map });\n\n      if (options.disabled) {\n        return;\n      }\n\n      this.marker = new google.maps.Marker(options);\n\n      google.maps.event.addListener(this.marker, 'dragend', $.proxy(this.markerDragged, this));\n    },\n\n    // Associate the input with the autocompleter and create a geocoder\n    // to fall back when the autocompleter does not return a value.\n    initGeocoder: function initGeocoder() {\n\n      // Indicates is user did select a result from the dropdown.\n      var selected = false;\n\n      var options = {\n        types: this.options.types,\n        bounds: this.options.bounds === true ? null : this.options.bounds,\n        componentRestrictions: this.options.componentRestrictions,\n        strictBounds: this.options.strictBounds\n      };\n\n      if (this.options.country) {\n        options.componentRestrictions = { country: this.options.country };\n      }\n\n      this.autocomplete = new google.maps.places.Autocomplete(this.input, options);\n\n      this.geocoder = new google.maps.Geocoder();\n\n      // Bind autocomplete to map bounds but only if there is a map\n      // and `options.bindToMap` is set to true.\n      if (this.map && this.options.bounds === true) {\n        this.autocomplete.bindTo('bounds', this.map);\n      }\n\n      // Watch `place_changed` events on the autocomplete input field.\n      google.maps.event.addListener(this.autocomplete, 'place_changed', $.proxy(this.placeChanged, this));\n\n      // Prevent parent form from being submitted if user hit enter.\n      this.$input.on('keypress.' + this._name, function (event) {\n        if (event.keyCode === 13) {\n          return false;\n        }\n      });\n\n      // Assume that if user types anything after having selected a result,\n      // the selected location is not valid any more.\n      if (this.options.geocodeAfterResult === true) {\n        this.$input.bind('keypress.' + this._name, $.proxy(function () {\n          if (event.keyCode != 9 && this.selected === true) {\n            this.selected = false;\n          }\n        }, this));\n      }\n\n      // Listen for \"geocode\" events and trigger find action.\n      this.$input.bind('geocode.' + this._name, $.proxy(function () {\n        this.find();\n      }, this));\n\n      // Saves the previous input value\n      this.$input.bind('geocode:result.' + this._name, $.proxy(function () {\n        this.lastInputVal = this.$input.val();\n      }, this));\n\n      // Trigger find action when input element is blurred out and user has\n      // not explicitly selected a result.\n      // (Useful for typing partial location and tabbing to the next field\n      // or clicking somewhere else.)\n      if (this.options.blur === true) {\n        this.$input.on('blur.' + this._name, $.proxy(function () {\n          if (this.options.geocodeAfterResult === true && this.selected === true) {\n            return;\n          }\n\n          if (this.options.restoreValueAfterBlur === true && this.selected === true) {\n            setTimeout($.proxy(this.restoreLastValue, this), 0);\n          } else {\n            this.find();\n          }\n        }, this));\n      }\n    },\n\n    // Prepare a given DOM structure to be populated when we got some data.\n    // This will cycle through the list of component types and map the\n    // corresponding elements.\n    initDetails: function initDetails() {\n      if (!this.options.details) {\n        return;\n      }\n\n      if (this.options.detailsScope) {\n        var $details = $(this.input).parents(this.options.detailsScope).find(this.options.details);\n      } else {\n        var $details = $(this.options.details);\n      }\n\n      var attribute = this.options.detailsAttribute,\n          details = {};\n\n      function setDetail(value) {\n        details[value] = $details.find(\"[\" + attribute + \"=\" + value + \"]\");\n      }\n\n      $.each(componentTypes, function (index, key) {\n        setDetail(key);\n        setDetail(key + \"_short\");\n      });\n\n      $.each(placesDetails, function (index, key) {\n        setDetail(key);\n      });\n\n      this.$details = $details;\n      this.details = details;\n    },\n\n    // Set the initial location of the plugin if the `location` options was set.\n    // This method will care about converting the value into the right format.\n    initLocation: function initLocation() {\n\n      var location = this.options.location,\n          latLng;\n\n      if (!location) {\n        return;\n      }\n\n      if (typeof location == 'string') {\n        this.find(location);\n        return;\n      }\n\n      if (location instanceof Array) {\n        latLng = new google.maps.LatLng(location[0], location[1]);\n      }\n\n      if (location instanceof google.maps.LatLng) {\n        latLng = location;\n      }\n\n      if (latLng) {\n        if (this.map) {\n          this.map.setCenter(latLng);\n        }\n        if (this.marker) {\n          this.marker.setPosition(latLng);\n        }\n      }\n    },\n\n    destroy: function destroy() {\n      if (this.map) {\n        google.maps.event.clearInstanceListeners(this.map);\n        google.maps.event.clearInstanceListeners(this.marker);\n      }\n\n      this.autocomplete.unbindAll();\n      google.maps.event.clearInstanceListeners(this.autocomplete);\n      google.maps.event.clearInstanceListeners(this.input);\n      this.$input.removeData();\n      this.$input.off(this._name);\n      this.$input.unbind('.' + this._name);\n    },\n\n    // Look up a given address. If no `address` was specified it uses\n    // the current value of the input.\n    find: function find(address) {\n      this.geocode({\n        address: address || this.$input.val()\n      });\n    },\n\n    // Requests details about a given location.\n    // Additionally it will bias the requests to the provided bounds.\n    geocode: function geocode(request) {\n      // Don't geocode if the requested address is empty\n      if (!request.address) {\n        return;\n      }\n      if (this.options.bounds && !request.bounds) {\n        if (this.options.bounds === true) {\n          request.bounds = this.map && this.map.getBounds();\n        } else {\n          request.bounds = this.options.bounds;\n        }\n      }\n\n      if (this.options.country) {\n        request.region = this.options.country;\n      }\n\n      this.geocoder.geocode(request, $.proxy(this.handleGeocode, this));\n    },\n\n    // Get the selected result. If no result is selected on the list, then get\n    // the first result from the list.\n    selectFirstResult: function selectFirstResult() {\n      //$(\".pac-container\").hide();\n\n      var selected = '';\n      // Check if any result is selected.\n      if ($(\".pac-item-selected\")[0]) {\n        selected = '-selected';\n      }\n\n      // Get the first suggestion's text.\n      var $span1 = $(\".pac-container:visible .pac-item\" + selected + \":first span:nth-child(2)\").text();\n      var $span2 = $(\".pac-container:visible .pac-item\" + selected + \":first span:nth-child(3)\").text();\n\n      // Adds the additional information, if available.\n      var firstResult = $span1;\n      if ($span2) {\n        firstResult += \" - \" + $span2;\n      }\n\n      this.$input.val(firstResult);\n\n      return firstResult;\n    },\n\n    // Restores the input value using the previous value if it exists\n    restoreLastValue: function restoreLastValue() {\n      if (this.lastInputVal) {\n        this.$input.val(this.lastInputVal);\n      }\n    },\n\n    // Handles the geocode response. If more than one results was found\n    // it triggers the \"geocode:multiple\" events. If there was an error\n    // the \"geocode:error\" event is fired.\n    handleGeocode: function handleGeocode(results, status) {\n      if (status === google.maps.GeocoderStatus.OK) {\n        var result = results[0];\n        this.$input.val(result.formatted_address);\n        this.update(result);\n\n        if (results.length > 1) {\n          this.trigger(\"geocode:multiple\", results);\n        }\n      } else {\n        this.trigger(\"geocode:error\", status);\n      }\n    },\n\n    // Triggers a given `event` with optional `arguments` on the input.\n    trigger: function trigger(event, argument) {\n      this.$input.trigger(event, [argument]);\n    },\n\n    // Set the map to a new center by passing a `geometry`.\n    // If the geometry has a viewport, the map zooms out to fit the bounds.\n    // Additionally it updates the marker position.\n    center: function center(geometry) {\n      if (geometry.viewport) {\n        this.map.fitBounds(geometry.viewport);\n        if (this.map.getZoom() > this.options.maxZoom) {\n          this.map.setZoom(this.options.maxZoom);\n        }\n      } else {\n        this.map.setZoom(this.options.maxZoom);\n        this.map.setCenter(geometry.location);\n      }\n\n      if (this.marker) {\n        this.marker.setPosition(geometry.location);\n        this.marker.setAnimation(this.options.markerOptions.animation);\n      }\n    },\n\n    // Update the elements based on a single places or geocoding response\n    // and trigger the \"geocode:result\" event on the input.\n    update: function update(result) {\n\n      if (this.map) {\n        this.center(result.geometry);\n      }\n\n      if (this.$details) {\n        this.fillDetails(result);\n      }\n\n      this.trigger(\"geocode:result\", result);\n    },\n\n    // Populate the provided elements with new `result` data.\n    // This will lookup all elements that has an attribute with the given\n    // component type.\n    fillDetails: function fillDetails(result) {\n\n      var data = {},\n          geometry = result.geometry,\n          viewport = geometry.viewport,\n          bounds = geometry.bounds;\n\n      // Create a simplified version of the address components.\n      $.each(result.address_components, function (index, object) {\n        var name = object.types[0];\n\n        $.each(object.types, function (index, name) {\n          data[name] = object.long_name;\n          data[name + \"_short\"] = object.short_name;\n        });\n      });\n\n      // Add properties of the places details.\n      $.each(placesDetails, function (index, key) {\n        data[key] = result[key];\n      });\n\n      // Add infos about the address and geometry.\n      $.extend(data, {\n        formatted_address: result.formatted_address,\n        location_type: geometry.location_type || \"PLACES\",\n        viewport: viewport,\n        bounds: bounds,\n        location: geometry.location,\n        lat: geometry.location.lat(),\n        lng: geometry.location.lng()\n      });\n\n      // Set the values for all details.\n      $.each(this.details, $.proxy(function (key, $detail) {\n        var value = data[key];\n        this.setDetail($detail, value);\n      }, this));\n\n      this.data = data;\n    },\n\n    // Assign a given `value` to a single `$element`.\n    // If the element is an input, the value is set, otherwise it updates\n    // the text content.\n    setDetail: function setDetail($element, value) {\n\n      if (value === undefined) {\n        value = \"\";\n      } else if (typeof value.toUrlValue == \"function\") {\n        value = value.toUrlValue();\n      }\n\n      if ($element.is(\":input\")) {\n        $element.val(value);\n      } else {\n        $element.text(value);\n      }\n    },\n\n    // Fire the \"geocode:dragged\" event and pass the new position.\n    markerDragged: function markerDragged(event) {\n      this.trigger(\"geocode:dragged\", event.latLng);\n    },\n\n    mapClicked: function mapClicked(event) {\n      this.trigger(\"geocode:click\", event.latLng);\n    },\n\n    // Fire the \"geocode:mapdragged\" event and pass the current position of the map center.\n    mapDragged: function mapDragged(event) {\n      this.trigger(\"geocode:mapdragged\", this.map.getCenter());\n    },\n\n    // Fire the \"geocode:idle\" event and pass the current position of the map center.\n    mapIdle: function mapIdle(event) {\n      this.trigger(\"geocode:idle\", this.map.getCenter());\n    },\n\n    mapZoomed: function mapZoomed(event) {\n      this.trigger(\"geocode:zoom\", this.map.getZoom());\n    },\n\n    // Restore the old position of the marker to the last knwon location.\n    resetMarker: function resetMarker() {\n      this.marker.setPosition(this.data.location);\n      this.setDetail(this.details.lat, this.data.location.lat());\n      this.setDetail(this.details.lng, this.data.location.lng());\n    },\n\n    // Update the plugin after the user has selected an autocomplete entry.\n    // If the place has no geometry it passes it to the geocoder.\n    placeChanged: function placeChanged() {\n      var place = this.autocomplete.getPlace();\n      this.selected = true;\n\n      if (!place.geometry) {\n        if (this.options.autoselect) {\n          // Automatically selects the highlighted item or the first item from the\n          // suggestions list.\n          var autoSelection = this.selectFirstResult();\n          this.find(autoSelection);\n        }\n      } else {\n        // Use the input text if it already gives geometry.\n        this.update(place);\n      }\n    }\n  });\n\n  // A plugin wrapper around the constructor.\n  // Pass `options` with all settings that are different from the default.\n  // The attribute is used to prevent multiple instantiations of the plugin.\n  $.fn.geocomplete = function (options) {\n\n    var attribute = 'plugin_geocomplete';\n\n    // If you call `.geocomplete()` with a string as the first parameter\n    // it returns the corresponding property or calls the method with the\n    // following arguments.\n    if (typeof options == \"string\") {\n\n      var instance = $(this).data(attribute) || $(this).geocomplete().data(attribute),\n          prop = instance[options];\n\n      if (typeof prop == \"function\") {\n        prop.apply(instance, Array.prototype.slice.call(arguments, 1));\n        return $(this);\n      } else {\n        if (arguments.length == 2) {\n          prop = arguments[1];\n        }\n        return prop;\n      }\n    } else {\n      return this.each(function () {\n        // Prevent against multiple instantiations.\n        var instance = $.data(this, attribute);\n        if (!instance) {\n          instance = new GeoComplete(this, options);\n          $.data(this, attribute, instance);\n        }\n      });\n    }\n  };\n})(jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ })

/******/ });